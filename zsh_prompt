#!/bin/zsh
#
# William Falk-Wallace
# zsh_prompt
#

############################## OLD PROMPT HELPERS ##############################
### return a random bash color code
function colorize()
{
  local color="$(($RANDOM % 2));$(($RANDOM % 7 + 30))m"
  echo "\[\033[$color\]"
}

### return standard thin black bash color code
function uncolor()
{
  local black='\[\033[00m\]'
  echo "$black"
}

### return a colored venv environment information string
# From engineerwithoutacause.com/show-current-virtualenv-on-bash-prompt.html
function venv_prompt()
{
  local green='\[\033[32m\]'
  local venv=''
  if [[ $VIRTUAL_ENV != "" ]]
  then
    local venv="$green{${VIRTUAL_ENV##*/}}$(uncolor)"
  fi
  echo "$venv"
}

### return a colored git branch information string
# From coderwall.com/p/pn8f0g
function git_branch()
{
  local git_status="$(git status 2> /dev/null)"
  local pattern="^On branch ([^${IFS}]*)"

  if [[ $git_status =~ $pattern ]]; then
    local branch=${BASH_REMATCH[1]}
    echo "($branch)"
  fi
}

############################## AGNOSTER OVERRIDES ##############################
### set the powerline shell right-prompt
# from http://stevelosh.com/blog/2010/02/my-extravagant-zsh-prompt/
RPROMPT='$(date +"%T")'

### Override zsh-theme prompt directory helper for brevity
prompt_dir() {
  prompt_segment blue black '%1d' # TODO: fix for g3
}



################################  FISH Prompt  #################################
### from https://www.zsh.org/mla/workers/2009/msg00415.html
# setopt localoptions
# setopt rc_quotes null_glob

# typeset -i lastfull=0
# typeset -i short=0
# typeset -i tilde=0
# typeset -i named=0

# if zstyle -t ':prompt:rtab' fish; then
#   lastfull=1
#   short=1
#   tilde=1
# fi
# if zstyle -t ':prompt:rtab' nameddirs; then
#   tilde=1
#   named=1
# fi
# zstyle -t ':prompt:rtab' last && lastfull=1
# zstyle -t ':prompt:rtab' short && short=1
# zstyle -t ':prompt:rtab' tilde && tilde=1

# while [[ $1 == -* ]]; do
#   case $1 in
#     -f|--fish)
#       lastfull=1
#       short=1
#       tilde=1
#     ;;
#     -h|--help)
#       print 'Usage: rtab [-f -l -s -t] [directory]'
#       print ' -f, --fish      fish-simulation, like -l -s -t'
#       print ' -l, --last      Print the last directory''s full name'
#       print ' -s, --short     Truncate directory names to the first character'
#       print ' -t, --tilde     Substitute ~ for the home directory'
#       print ' -T, --nameddirs Substitute named directories as well'
#       print 'The long options can also be set via zstyle, like'
#       print '  zstyle :prompt:rtab fish yes'
#       return 0
#     ;;
#     -l|--last) lastfull=1 ;;
#     -s|--short) short=1 ;;
#     -t|--tilde) tilde=1 ;;
#     -T|--nameddirs)
#       tilde=1
#       named=1
#     ;;
#   esac
#   shift
# done

# typeset -a tree expn
# typeset result part dir=${1-$PWD}
# typeset -i i

# [[ -d $dir ]] || return 0

# if (( named )) {
#   for part in ${(k)nameddirs}; {
#     [[ $dir == ${nameddirs[$part]}(/*|) ]] && dir=${dir/${nameddirs[$part]}/\~$part}
#   }
# }
# (( tilde )) && dir=${dir/$HOME/\~}
# tree=(${(s:/:)dir})
# (
#   unfunction chpwd 2> /dev/null
#   if [[ $tree[1] == \~* ]] {
#     cd ${~tree[1]}
#     result=$tree[1]
#     shift tree
#   } else {
#     cd /
#   }
#   for dir in $tree; {
#     if (( lastfull && $#tree == 1 )) {
#       result+="/$tree"
#       break
#     }
#     expn=(a b)
#     part=''
#     i=0
#     until [[ (( ${#expn} == 1 )) || $dir = $expn || $i -gt 99 ]]  do
#       (( i++ ))
#       part+=$dir[$i]
#       expn=($(echo ${part}*(-/)))
#       (( short )) && break
#     done
#     result+="/$part"
#     cd $dir
#     shift tree
#   }
#   echo ${result:-/}
# )
